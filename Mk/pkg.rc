. /sys/ports/Config/ports.conf

# setup some sane defaults.
if(~ $#BUILDPATH 0){
	BUILDPATH=work
}

fn checkport {
	s=''
	echo 'checking for port: '^$1
	if(test -e $PORTS/Config/ports.db){
		if(grep -s $1 $PORTS/Config/ports.db){
			s=''
		}
		if(! grep -s $1 $PORTS/Config/ports.db){
			s='checkport: not installed'
		}
	}
	if(! test -e $PORTS/Config/ports.db){
		s='checkport: no database'
	}
	status=$s
}

fn register {
	if(~ $#2 0){
		vers=0
	}
	if not {
		vers=$2
	}
	echo 'adding installed port...'
	if(test -e $PORTS/Config/ports.db){
		echo $1^' '^$2 >> $PORTS/Config/ports.db
	}
	if not {
		echo 'creating install database...'
		touch $PORTS/Config/ports.db
		echo $1^' '^$2 >> $PORTS/Config/ports.db
	}
}

fn deregister {
	echo 'removing installed port...'
	if(test -e $PORTS/Config/ports.db){
		# grep returns non-nil status when no lines matched.
		ptmp=/tmp/ports.$pid
		grep -v $1 $PORTS/Config/ports.db > $ptmp || status=''
		cp $ptmp $PORTS/Config/ports.db && rm $ptmp
	}
}

fn portversion {
	s=''
	vers=0
	echo 'checking port version: '^$1
	if(test -e $PORTS/Config/ports.db){
		if(grep -s $1 $PORTS/Config/ports.db){
			vers=`{grep $1 $PORTS/Config/ports.db | awk '{print $2}'}
		}
	}
	if(~ $vers 0){
		s='not found or no version'
	}
	if not {
		echo $vers
	}
	status=$s
}

fn apply {
	file=$1
	echo applying `{basename $file}
	ape/patch -p1 < $file
}

fn unapply {
	file=$1
	echo unapplying `{basename $file}
	ape/patch -R -p1 < $file
}

# lsd - ls directories
fn lsd {
	ls -l $1 | grep '^d' | awk '{ print $10 }'
}
