</sys/ports/Config/ports.mk.conf
# </sys/ports/Mk/newvars.mk  # For Aram

# for compatibility
BUILDFOR=$objtype
PORTID=`{echo $PORTNAME | md5sum}
PORTCAT=`{basename -d `{pwd} | sed 's,.*/,,'}
PORTNAME=$PORTCAT/`{pbd}
files=`{pwd}/files

# for ease of use
BUILDPATH=`{ if(~ $#BUILDPATH 0){ echo 'work/' }; if not { echo $BUILDPATH }}
BUILDCOMMAND=`{ if(~ $#BUILDCOMMAND 0){ echo 'mk' }; if not { echo $BUILDCOMMAND }}
INSTALLCOMMAND=`{ if(~ $#INSTALLCOMMAND 0){ echo 'mk install' }; if not { echo $INSTALLCOMMAND }}
CLEANCOMMAND=`{ if(~ $#CLEANCOMMAND 0){ echo 'mk clean' }; if not { echo $CLEANCOMMAND }}
archmask=`{ if(! ~ $#ARCHMASK 0) { echo $ARCHMASK } }

<|$PORTS/Mk/mk.rc

all:VQE:	install

info:VQE:
	echo 'Name: ' $PORTNAME
	if(! ~ $VERSION 0){
		echo 'Port Version: ' $VERSION
	}
	echo 'Description: ' $DESCRIPTION
	echo 'Complain to: ' $OWNER

check:VQE:
	. $PORTS/Mk/pkg.rc
	qa

MYDISTFILEPATHS=${MYDISTFILES:%=$DISTFILES/$PORTNAME/%}

fetch:VQ:
	. $PORTS/Config/ports.conf
	. $PORTS/Mk/pkg.rc
	
	gotem=()
	for(p in $MYDISTFILEPATHS)
		if(test -e $p)
			gotem=($gotem $p)
	
	if(! ~ $#gotem $#DISTFILEPATHS)
		exit
	
	echo fetching distfiles for $PORTNAME
	# avoid a bug in mk, which executes prereqs when mtimes are equal.
	test -e $target && exit
	test -e patch && rm patch
	
	# ensure distfiles exists
	if(! test -d $DISTFILES){
		mkdir $DISTFILES
		chmod +t $DISTFILES
	}
	
	if(! test -d $DISTFILES/$PORTNAME)
		mkdir -p $DISTFILES/$PORTNAME
	
	# dowload multiple http files, possibly with new names
	if(! ~ $#WEBSOURCE 0){
		rfork n
		test -w /mnt/web/clone || webfs
		for(s in $WEBSOURCE){
			eval `{uriextract $s}
			if(! test -r $DISTFILES/$PORTNAME/$local)
				V hget -o $DISTFILES/$PORTNAME/$local $remote
			rm -f /env/^(local remote)
		}
	}
	
	if(! ~ $#9PSERVER 0){
		rfork n
		V $PORTS/Mk/ports9fs $9PSERVER
	}
	
	if(! ~ $#9PFILE 0){
		for(s in $9PFILE){
			eval `{uriextract $s}
			if(! test -r $DISTFILES/$PORTNAME/$local)
				V fcp $remote $DISTFILES/$PORTNAME/$local
			if not status=''
			rm -f /env/^(local remote)
		}
	}
	
	if(! ~ $#9PDIR 0){
		for(s in $9PDIR){
			eval `{uriextract $s}
			if(! test -d $DISTFILES/$PORTNAME/$local){
				V mkdir -p $DISTFILES/$PORTNAME/$local
				V $PORTS/Mk/portsdircp $remote $DISTFILES/$PORTNAME/$local
			}
			if not status=''
			rm -f /env/^(local remote)
		}
	}
	
	if(! ~ $#HGSOURCE 0){
		eval `{uriextract $HGSOURCE}
		if(! test -d $DISTFILES/$PORTNAME/$local){
			v='--quiet'
			if(~ $V 2) v=()
			rfork n
			test -w /mnt/web/clone || webfs
			if(~ $#HGREV 0) HGREV=tip
			V hg $v clone -r $HGREV $remote $DISTFILES/$PORTNAME/$local
		}
		rm -f /env/^(local remote v)
	}
	status=''

$MYDISTFILEPATHS:N:	fetch

distfiles:Q:
	echo $MYDISTFILES

distclean:Q:	nuke
	echo removing $DISTFILES/$PORTNAME
	rm -rf $DISTFILES/$PORTNAME

# hack around the fact that 9P directory file list isn't
# generated when mk is invoked with an empty dist dir,
# so reinvoke mk to build the list after fetching
_manifest:VQ:	$MYDISTFILEPATHS
	echo checksumming $prereq
	if(~ $#MYDISTFILES 0) echo -n > manifest
	if not @{
		cd $DISTFILES/$PORTNAME
		sha1sum -2 256 $MYDISTFILES
	} > manifest

manifest:QD:	$MYDISTFILEPATHS
	if(~ $NOVERIFY 1) exit
	test -e $target && exit
	mk _manifest

_verify:VQ:	$MYDISTFILEPATHS
	echo verifying $MYDISTFILEPATHS
	if(~ $#MYDISTFILES 0) echo -n > verify
	if not @{
		cd $DISTFILES/$PORTNAME
		sha1sum -2 256 $MYDISTFILES
	} > verify
	
	if(cmp -s manifest verify)
		exit
	
	s='MANIFEST VERFICATION FAILED'
	echo $s
	echo file sums changed:
	ape/diff -u manifest verify
	exit $s

verify:DQ:	manifest 
	if(~ $NOVERIFY 1){
		echo 'skipping verification'
		exit
	}
	test -e $target && exit
	mk _verify

_extract:VQ:	$MYDISTFILEPATHS
	. /sys/ports/Mk/pkg.rc
	echo extracting $MYDISTFILEPATHS
	for(l in $MYDISTFILEPATHS) @{
		cd work
		extract $l
	}

extract:Q:	verify
	test -e $target && exit
	test -e patch && rm patch
	mkdir -p work
	mk _extract
	touch $target

patch:QE:	extract
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	# avoid a bug in mk, which executes prereqs when mtimes are equal.
	test -e $target && exit
	echo patching $PORTNAME
	for(p in `{ls $files/*.patch >[2]/dev/null}){
		@{ cd $BUILDPATH && apply $p } || exit 'applying '^$p^' failed'
	}
	if(test -d $files){
		$PORTS/Mk/portsdircp $files $BUILDPATH
	}
	touch $target

unpatch:VQE:	$BUILDPATH
	. /sys/ports/Mk/pkg.rc
	test -e patch || exit 'not patched'
	for(p in `{ls $files/*.patch >[2]/dev/null}){
		@{ cd $BUILDPATH && unapply $p } || exit 'unapplying '^$p^' failed'
	}
	rm -f patch

build:QE:	patch
	. /sys/ports/Mk/pkg.rc
	if(! ~ $#archmask 0){
		if(! ~ $#IGNOREMASKS 0){
			for(i in $archmask){
				if(~ $i $objtype){
					exit 'objtype '^$"objtype^' is not supported'
				}
			}
		}
		if not {
			echo 'warning: ignoring architecture build masks'
		}
	}
	if(! ~ $#DEPS 0){
		echo 'installing dependencies...'
		for(i in $DEPS){
			if(! checkport $i){
				@{
					# hacky. plz fix.
					rfork nE
					PORTS=$PORTS
					home=$home
					objtype=$objtype
					cputype=$cputype
					cd $PORTS/$i
					echo 'installing dependent port '^$i^'...'
					mk all
				}
			}
		}
	}
	@{
		rfork ne
		cd $BUILDPATH
		if(! ~ $BUILDCOMMAND ''){
			$BUILDCOMMAND
		}
		if not {
			status=''
		}
		if(! ~ $#POSTBUILD 0){
			echo 'Running post-build hooks...'
			$POSTBUILD
		}
	}
	touch build

test:VQE:	build
	. /sys/ports/Mk/pkg.rc
	if(! ~ $#archmask 0){
		for(i in $archmask){
			if(~ $i $objtype){
				exit 'objtype '^$"objtype^' is not supported'
			}
		}
	}
	@{
		rfork ne
		cd $BUILDPATH
		if(! ~ $#TESTCOMMAND 0){
			$TESTCOMMAND
			if(! ~ $status ''){
				echo 'Tests failed. Please notify '^$OWNER
				status='tests failed'
			}
			if not {
				echo 'Tests completed successfully!'
				status=''
			}
		}
		if not {
			echo 'tests aren''t supported on this port'
			status='no tests'
		}
	}
	exit ''

install:QE:	build
	. /sys/ports/Mk/pkg.rc
	if(! ~ $#BUILDONLY 0){
		for(i in $BUILDONLY){
			if(~ $i $objtype){
				exit 'objtype '^$"objtype^' is not supported.'
			}
		}
	}
	if(! checkport $PORTNAME){
		@{ rfork ne; cd $BUILDPATH && $INSTALLCOMMAND } || exit $status
		if(! ~ $#VERSION 0){
			register $PORTNAME $VERSION
		}
		if not {
			register $PORTNAME '0'
		}
		if(! ~ $#MESSAGE 0){
			for(i in $MESSAGE){
				echo $i
			}
		}
		if(! ~ $#MSGFILE 0){
			cat $MSGFILE
		}
		touch install
	}
	if not {
		echo $PORTNAME is already installed
		status=''
	}

reinstall:VQE:	build
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	cd $BUILDPATH
	@{
		rfork ne
		$INSTALLCOMMAND
	}
	if(! ~ $*MESSAGE 0){
		for(i in $MESSAGE){
			echo $i
		}
	}

testinstall:VQE:
	. /sys/ports/Mk/pkg.rc
	cd $BUILDPATH
	@{
		rfork ne
		$INSTALLCOMMAND
	}
	if(! ~ $*MESSAGE 0){
		for(i in $MESSAGE){
			echo $i
		}
	}
	status=''

clean:VQE:	$BUILDPATH
	@{
		rfork ne
		cd $BUILDPATH || exit 'not fetched'
		if(! ~ $#NOCLEAN 0) {
			exit
		}
		if(! ~ $#CLEANCOMMAND 0){
			$CLEANCOMMAND || exit $status
		}
	}
	rm -f build
	status=''

nuke:VQ:
	rm -rf work/
	rm -f fetch verify extract patch build install

uninstall:VQE:
	. /sys/ports/Mk/pkg.rc
	if(! checkport $PORTNAME){
		echo $PORTNAME is not installed
		exit notinstalled
	}
	echo removing $PORTNAME...
	if(~ $#UNINSTALL 0 && ~ $#UNINSTALLCOMMAND 0){
		if(test -e $PORTS^$PORTNAME^'/uninstall'){
			UINSTALLCOMMAND=$PORTS^$PORTNAME^/'uninstall'
		}
		if not {
			echo 'unable to uninstall port'
			echo 'please send a bug report to '^$OWNER^' about this'
			echo 'If '^$OWNER^' does not respond or fix the port please'
			echo 'email mveety@gmail.com, and he will remove the port.'
			exit nouninstall
		}
	}
	if(~ $#UNINSTALLCOMMAND 0){
		for(i in $UNINSTALL){
			echo 'removing '''^$i^'''...'
			rm -f $i
		}
	}
	if not {
		@{
			rfork ne
			cd $BUILDPATH
			$UNINSTALLCOMMAND
		} || exit $status
	}
	deregister $PORTNAME
	rm -f install
