</sys/ports/Config/ports.mk.conf
# </sys/ports/Mk/newvars.mk  # For Aram

# for compatibility
BUILDFOR=$objtype
PORTID=`{echo $PORTNAME | md5sum}
PORTCAT=`{basename -d `{pwd} | sed 's,.*/,,'}
PORTNAME=$PORTCAT/`{pbd}
files=`{pwd}/files

# for ease of use
BUILDPATH=`{ if(~ $#BUILDPATH 0){ echo 'work/' }; if not { echo $BUILDPATH }}
BUILDCOMMAND=`{ if(~ $#BUILDCOMMAND 0){ echo 'mk' }; if not { echo $BUILDCOMMAND }}
INSTALLCOMMAND=`{ if(~ $#INSTALLCOMMAND 0){ echo 'mk install' }; if not { echo $INSTALLCOMMAND }}
CLEANCOMMAND=`{ if(~ $#CLEANCOMMAND 0){ echo 'mk clean' }; if not { echo $CLEANCOMMAND }}
WORKFILE=`{ if(~ $#WORKFILE 0){ echo './' }; if not { echo $WORKFILE }}
archmask=`{ if(! ~ $#ARCHMASK 0) { echo $ARCHMASK } }

all:VQE:fetch build install

info:VQE:
	echo 'Name: ' $PORTNAME
	if(! ~ $VERSION 0){
		echo 'Port Version: ' $VERSION
	}
	echo 'Description: ' $DESCRIPTION
	echo 'Complain to: ' $OWNER

check:VQE:
	. $PORTS/Config/ports.conf
	. $PORTS/Mk/pkg.rc
	qa

fetch:QE:
	. /sys/ports/Config/ports.conf
	test -e patch && rm patch
	@{
		rfork ne
		mkdir -p work/
		cd work
		if(! ~ $#WEBSOURCE 0){
			{ webfs && hget $WEBSOURCE > $WORKFILE } || exit $status
		}
		if(! ~ $#9PSERVER 0){
			# i think we might want to add this in the future
			# maybe just nick 9front's 9fs
			$PORTS/Mk/ports9fs $9PSERVER
			if(! ~ $#9PFILE 0){
				if(! ~ $#9PFILE 1){
					for(i in $9PFILE){
						fcp $i ./
					}
				}
				if not {
					fcp $9PFILE $WORKFILE
				}
			}
			if(! ~ $#9PDIR 0){
				$PORTS/Mk/portsdircp $9PDIR ./
			}
		}
		if(! ~ $#EXTRACTCOMMAND 0){
			file=`{pwd}^/^$WORKFILE
			$EXTRACTCOMMAND $file
		}
		if(! ~ $#HGSOURCE 0){
			@{
				rfork ne
				{ webfs && hg clone $HGSOURCE }
				if(! ~ $#HGREV 0){
					hg up $HGREV
				}
			}
		}
		status=''
	} || exit $status
	status=''
	touch fetch

patch:QE:fetch
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	for(p in `{ls $files/*.patch >[2]/dev/null}){
		@{ cd $BUILDPATH && apply $p } || exit 'applying '^$p^' failed'
	}
	if(! ~ $#PATCHES 0){
		$PORTS/Mk/portsdircp $PATCHES $BUILDPATH
	}
	touch patch

unpatch:VQE:	$BUILDPATH
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	test -e patch || exit 'not patched'
	for(p in `{ls $files/*.patch >[2]/dev/null}){
		@{ cd $BUILDPATH && unapply $p } || exit 'unapplying '^$p^' failed'
	}
	rm -f patch

build:QE:patch
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	if(! ~ $#archmask 0){
		if(! ~ $#IGNOREMASKS 0){
			for(i in $archmask){
				if(~ $i $objtype){
					exit 'objtype '^$"objtype^' is not supported'
				}
			}
		}
		if not {
			echo 'warning: ignoring architecture build masks'
		}
	}
	if(! ~ $#DEPS 0){
		echo 'installing dependencies...'
		for(i in $DEPS){
			if(! checkport $i){
				@{
					# hacky. plz fix.
					rfork nE
					PORTS=$PORTS
					home=$home
					objtype=$objtype
					cputype=$cputype
					cd $PORTS/$i
					echo 'installing dependent port '^$i^'...'
					mk all
				}
			}
		}
	}
	@{
		rfork ne
		cd $BUILDPATH
		if(! ~ $BUILDCOMMAND ''){
			$BUILDCOMMAND
		}
		if not {
			status=''
		}
		if(! ~ $#POSTBUILD 0){
			echo 'Running post-build hooks...'
			$POSTBUILD
		}
	}
	touch build

test:VQE:build fetch
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	if(! ~ $#archmask 0){
		for(i in $archmask){
			if(~ $i $objtype){
				exit 'objtype '^$"objtype^' is not supported'
			}
		}
	}
	@{
		rfork ne
		cd $BUILDPATH
		if(! ~ $#TESTCOMMAND 0){
			$TESTCOMMAND
			if(! ~ $status ''){
				echo 'Tests failed. Please notify '^$OWNER
				status='tests failed'
			}
			if not {
				echo 'Tests completed successfully!'
				status=''
			}
		}
		if not {
			echo 'tests aren''t supported on this port'
			status='no tests'
		}
	}
	exit ''

install:QE:build patch fetch
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	if(! ~ $#BUILDONLY 0){
		for(i in $BUILDONLY){
			if(~ $i $objtype){
				exit 'objtype '^$"objtype^' is not supported.'
			}
		}
	}
	if(! checkport $PORTNAME){
		@{ rfork ne; cd $BUILDPATH && $INSTALLCOMMAND } || exit $status
		if(! ~ $#VERSION 0){
			register $PORTNAME $VERSION
		}
		if not {
			register $PORTNAME '0'
		}
		if(! ~ $#MESSAGE 0){
			for(i in $MESSAGE){
				echo $i
			}
		}
		if(! ~ $#MSGFILE 0){
			cat $MSGFILE
		}
		touch install
	}
	if not {
		echo $PORTNAME is already installed
		status=''
	}

reinstall:VQE:build fetch
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	cd $BUILDPATH
	@{
		rfork ne
		$INSTALLCOMMAND
	}
	if(! ~ $*MESSAGE 0){
		for(i in $MESSAGE){
			echo $i
		}
	}

testinstall:VQE:
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	cd $BUILDPATH
	@{
		rfork ne
		$INSTALLCOMMAND
	}
	if(! ~ $*MESSAGE 0){
		for(i in $MESSAGE){
			echo $i
		}
	}
	status=''

clean:VQE:	$BUILDPATH
	. /sys/ports/Config/ports.conf
	@{
		rfork ne
		cd $BUILDPATH || exit 'not fetched'
		if(! ~ $#NOCLEAN 0) {
			exit
		}
		if(! ~ $#CLEANCOMMAND 0){
			$CLEANCOMMAND || exit $status
		}
	}
	rm -f build
	status=''

nuke:VQE:
	rm -rf work/
	rm -f fetch build install patch

uninstall:VQE:
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	if(! checkport $PORTNAME){
		echo $PORTNAME is not installed
		exit notinstalled
	}
	echo removing $PORTNAME...
	if(~ $#UNINSTALL 0 && ~ $#UNINSTALLCOMMAND 0){
		if(test -e $PORTS^$PORTNAME^'/uninstall'){
			UINSTALLCOMMAND=$PORTS^$PORTNAME^/'uninstall'
		}
		if not {
			echo 'unable to uninstall port'
			echo 'please send a bug report to '^$OWNER^' about this'
			echo 'If '^$OWNER^' does not respond or fix the port please'
			echo 'email mveety@gmail.com, and he will remove the port.'
			exit nouninstall
		}
	}
	if(~ $#UNINSTALLCOMMAND 0){
		for(i in $UNINSTALL){
			echo 'removing '''^$i^'''...'
			rm -f $i
		}
	}
	if not {
		@{
			rfork ne
			cd $BUILDPATH
			$UNINSTALLCOMMAND
		} || exit $status
	}
	deregister $PORTNAME
	rm -f install
