</sys/ports/Config/ports.mk.conf
# </sys/ports/Mk/newvars.mk  # For Aram

# for compatibility
BUILDFOR=$objtype
PORTID=`{echo $PORTNAME | md5sum}
PORTCAT=`{basename -d `{pwd} | sed 's,.*/,,'}
PORTNAME=$PORTCAT/`{basename `{pwd}}
files=`{pwd}/files

all:VQE: fetch build install

info:VQE:
	echo 'Name: ' $PORTNAME
	if(! ~ $VERSION 0){
		echo 'Port Version: ' $VERSION
	}
	echo 'Description: ' $DESCRIPTION
	echo 'Complain to: ' $OWNER

fetch:VQE:
	. /sys/ports/Config/ports.conf
	mkdir -p work/
	test -e work/.patched && rm work/.patched
	if(! ~ $#WEBSOURCE 0){
		@{ rfork ne; webfs && hget $WEBSOURCE > work/$WORKFILE } || exit $status
	}
	if(! ~ $#9PSERVER 0){
		if(! ~ $#9PFILE 0){
			@{ rfork ne; 9fs $9PSERVER && fcp $9PFILE work/$WORKFILE } || exit $status
		}
		if(! ~ $#9PDIR 0){
			@{ rfork ne; 9fs $9PSERVER && dircp $9PDIR work/ } || exit $status
		}
	}
	if(! ~ $#EXTRACTCOMMAND 0){
		file=`{pwd}^/work/^$WORKFILE
		cd work
		$EXTRACTCOMMAND $file || exit $status
	}
	if(! ~ $#HGSOURCE 0){
		if(! ~ $#HGREV 0){
			rev=(--rev $HGREV)
		}
		@{ rfork ne; cd work; webfs && hg clone $rev $HGSOURCE } || exit $status
	}
	exit ''

patch:VQE:
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	if(test -e work/.patched){
		exit 'already patched'
	}
	for(p in `{ls $files/*.patch >[2]/dev/null}){
		@{ cd $BUILDPATH && apply $p } || exit 'applying '^$p^' failed'
	}
	if(! ~ $#PATCHES 0){
		dircp $PATCHES $BUILDPATH
	}
	touch work/.patched || exit $status

unpatch:VQE:
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	if(! test -e work/.patched){
		exit 'not patched'
	}
	for(p in `{ls $files/*.patch >[2]/dev/null}){
		@{ cd $BUILDPATH && unapply $p } || exit 'unapplying '^$p^' failed'
	}
	rm work/.patched || exit $status

build:VQE:
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	if(! ~ $#archmask 0){
		for(i in $archmask){
			if(~ $i $objtype){
				exit 'objtype '^$"objtype^' is not supported'
			}
		}
	}
	if(! ~ $#DEPS 0){
		echo 'dependencies are broke at the moment. sorry.'
		exit 'depsbroken'
		for(i in $DEPS){
			@{
				rfork ne
				if(! checkport $i){
					cd /sys/ports/$i
					mk fetch
					mk build
					mk install
				}
			}
		}
	}
	if(! test -e work/.patched){
		mk patch || exit $status
	}
	cd $BUILDPATH
	@{
		rfork ne
		if(! ~ $BUILDCOMMAND ''){
			$BUILDCOMMAND
		}
		if not {
			status=''
		}
	}

install:VQE: # build fetch
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	if(! ~ $#BUILDONLY 0){
		for(i in $BUILDONLY){
			if(~ $i $objtype){
				exit 'objtype '^$"objtype^' is not supported.'
			}
		}
	}
	if(! checkport $PORTNAME){
		@{ rfork ne; cd $BUILDPATH && $INSTALLCOMMAND } || exit $status
		if(! ~ $#VERSION 0){
			register $PORTNAME $VERSION
		}
		if not {
			register $PORTNAME '0'
		}
		if(! ~ $*MESSAGE 0){
			for(i in $MESSAGE){
				echo $i
			}
		}
	}
	if not {
		echo $PORTNAME is already installed
		status='already installed'
	}

reinstall:VQE: # build fetch
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	cd $BUILDPATH
	@{
		rfork ne
		$INSTALLCOMMAND
	}
	if(! ~ $*MESSAGE 0){
		for(i in $MESSAGE){
			echo $i
		}
	}

clean:VQE: # build fetch
	. /sys/ports/Config/ports.conf
	cd $BUILDPATH || exit notfetched
	if(! ~ $#CLEANCOMMAND 0){
		$CLEANCOMMAND || exit $status
	}
	exit ''

nuke:VQE:
	rm -rf work/

uninstall:VQE: # fetch
	. /sys/ports/Config/ports.conf
	. /sys/ports/Mk/pkg.rc
	if(! checkport $PORTNAME){
		echo $PORTNAME is not installed
		exit notinstalled
	}
	echo removing $PORTNAME...
	if(~ $#UNINSTALL 0 && ~ $#UNINSTALLCOMMAND 0){
		if(test -e $PORTS^$PORTNAME^'/uninstall'){
			UINSTALLCOMMAND=$PORTS^$PORTNAME^/'uninstall'
		}
		if not {
			echo 'unable to uninstall port'
			echo 'please send a bug report to '^$OWNER^' about this'
			echo 'If '^$OWNER^' does not respond or fix the port please'
			echo 'email mveety@gmail.com, and he will remove the port.'
			exit nouninstall
		}
	}
	if(~ $#UNINSTALLCOMMAND 0){
		for(i in $UNINSTALL){
			rm -f $i
		}
	}
	if not {
		@{ rfork ne; cd $BUILDPATH; $UNINSTALLCOMMAND } || exit $status
	}
	deregister $PORTNAME

