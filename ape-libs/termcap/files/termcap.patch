diff -ru orig/termcap.c termcap-1.3.1/termcap.c
--- orig/termcap.c	Sat Jun 13 20:56:32 2015
+++ termcap-1.3.1/termcap.c	Sun Jun 14 05:27:05 2015
@@ -51,9 +51,10 @@
 #endif
 
 #ifdef HAVE_UNISTD_H
+#include <sys/types.h>
 #include <unistd.h>
 #endif
-#ifdef _POSIX_VERSION
+#ifdef HAVE_FCNTL_H
 #include <fcntl.h>
 #endif
 
@@ -85,20 +86,19 @@
 #endif
 
 #ifndef TERMCAP_FILE
-#define TERMCAP_FILE "/etc/termcap"
+#define TERMCAP_FILE "/sys/lib/termcap"
 #endif
 
 #ifndef emacs
 static void
-memory_out ()
+memory_out (void)
 {
   write (2, "virtual memory exhausted\n", 25);
   exit (1);
 }
 
 static char *
-xmalloc (size)
-     unsigned size;
+xmalloc (unsigned int size)
 {
   register char *tem = malloc (size);
 
@@ -108,9 +108,7 @@
 }
 
 static char *
-xrealloc (ptr, size)
-     char *ptr;
-     unsigned size;
+xrealloc (char *ptr, unsigned int size)
 {
   register char *tem = realloc (ptr, size);
 
@@ -126,15 +124,14 @@
    for tgetnum, tgetflag and tgetstr to find.  */
 static char *term_entry;
 
-static char *tgetst1 ();
+static char *tgetst1 (char *, char **);
 
 /* Search entry BP for capability CAP.
    Return a pointer to the capability (in BP) if found,
    0 if not found.  */
 
 static char *
-find_capability (bp, cap)
-     register char *bp, *cap;
+find_capability (register char *bp, register char *cap)
 {
   for (; *bp; bp++)
     if (bp[0] == ':'
@@ -145,8 +142,7 @@
 }
 
 int
-tgetnum (cap)
-     char *cap;
+tgetnum (char *cap)
 {
   register char *ptr = find_capability (term_entry, cap);
   if (!ptr || ptr[-1] != '#')
@@ -155,8 +151,7 @@
 }
 
 int
-tgetflag (cap)
-     char *cap;
+tgetflag (char *cap)
 {
   register char *ptr = find_capability (term_entry, cap);
   return ptr && ptr[-1] == ':';
@@ -168,9 +163,7 @@
    If AREA is null, space is allocated with `malloc'.  */
 
 char *
-tgetstr (cap, area)
-     char *cap;
-     char **area;
+tgetstr (char *cap, char **area)
 {
   register char *ptr = find_capability (term_entry, cap);
   if (!ptr || (ptr[-1] != '=' && ptr[-1] != '~'))
@@ -208,9 +201,7 @@
    or NULL if PTR is NULL.  */
 
 static char *
-tgetst1 (ptr, area)
-     char *ptr;
-     char **area;
+tgetst1 (char *ptr, char **area)
 {
   register char *p, *r;
   register int c;
@@ -314,10 +305,7 @@
 #endif /* not emacs */
 
 void
-tputs (str, nlines, outfun)
-     register char *str;
-     int nlines;
-     register int (*outfun) ();
+tputs (register char *str, int nlines, register int *outfun(char))
 {
   register int padcount = 0;
   register int speed;
@@ -389,10 +377,10 @@
 
 /* Forward declarations of static functions.  */
 
-static int scan_file ();
-static char *gobble_line ();
-static int compare_contin ();
-static int name_match ();
+static int scan_file (char *, int, struct termcap_buffer *);
+static char *gobble_line (int, struct termcap_buffer *, char *);
+static int compare_contin (char *, char *);
+static int name_match (char *, char *);
 
 #ifdef VMS
 
@@ -401,8 +389,7 @@
 #include <nam.h>
 
 static int
-valid_filename_p (fn)
-     char *fn;
+valid_filename_p (char *fn)
 {
   struct FAB fab = cc$rms_fab;
   struct NAM nam = cc$rms_nam;
@@ -446,8 +433,7 @@
    in it, and some other value otherwise.  */
 
 int
-tgetent (bp, name)
-     char *bp, *name;
+tgetent (char *bp, char *name)
 {
   register char *termcap_name;
   register int fd;
@@ -611,10 +597,7 @@
    or 0 if no entry is found in the file.  */
 
 static int
-scan_file (str, fd, bufp)
-     char *str;
-     int fd;
-     register struct termcap_buffer *bufp;
+scan_file (char *str, int fd, register struct termcap_buffer *bufp)
 {
   register char *end;
 
@@ -651,8 +634,7 @@
    by termcap entry LINE.  */
 
 static int
-name_match (line, name)
-     char *line, *name;
+name_match (char *line, char *name)
 {
   register char *tem;
 
@@ -667,8 +649,7 @@
 }
 
 static int
-compare_contin (str1, str2)
-     register char *str1, *str2;
+compare_contin (register char *str1, register char *str2)
 {
   register int c1, c2;
   while (1)
@@ -708,10 +689,7 @@
    thing as one line.  The caller decides when a line is continued.  */
 
 static char *
-gobble_line (fd, bufp, append_end)
-     int fd;
-     register struct termcap_buffer *bufp;
-     char *append_end;
+gobble_line (int fd, register struct termcap_buffer *bufp, char * append_end)
 {
   register char *end;
   register int nread;
diff -ru orig/tparam.c termcap-1.3.1/tparam.c
--- orig/tparam.c	Sat Jun 13 20:56:32 2015
+++ termcap-1.3.1/tparam.c	Sun Jun 14 05:12:37 2015
@@ -21,6 +21,8 @@
 #include <config.h>
 #endif
 
+#include <unistd.h>
+
 #ifdef emacs
 #include "lisp.h"		/* for xmalloc */
 #else
@@ -46,15 +48,14 @@
 
 #ifndef emacs
 static void
-memory_out ()
+memory_out (void)
 {
   write (2, "virtual memory exhausted\n", 25);
   exit (1);
 }
 
 static char *
-xmalloc (size)
-     unsigned size;
+xmalloc (unsigned int size)
 {
   register char *tem = malloc (size);
 
@@ -64,9 +65,7 @@
 }
 
 static char *
-xrealloc (ptr, size)
-     char *ptr;
-     unsigned size;
+xrealloc (char *ptr, unsigned int size)
 {
   register char *tem = realloc (ptr, size);
 
@@ -88,15 +87,11 @@
 
    The fourth and following args to tparam serve as the parameter values.  */
 
-static char *tparam1 ();
+static char *tparam1 (char*, char *, int, char *, char *, int *);
 
 /* VARARGS 2 */
 char *
-tparam (string, outstring, len, arg0, arg1, arg2, arg3)
-     char *string;
-     char *outstring;
-     int len;
-     int arg0, arg1, arg2, arg3;
+tparam (char *string, char *outstring, int len, int arg0, int arg1, int arg2, int arg3)
 {
   int arg[4];
 
@@ -113,9 +108,7 @@
 static char tgoto_buf[50];
 
 char *
-tgoto (cm, hpos, vpos)
-     char *cm;
-     int hpos, vpos;
+tgoto (char *cm, int hpos, int vpos)
 {
   int args[2];
   if (!cm)
@@ -126,12 +119,7 @@
 }
 
 static char *
-tparam1 (string, outstring, len, up, left, argp)
-     char *string;
-     char *outstring;
-     int len;
-     char *up, *left;
-     register int *argp;
+tparam1 (char *string, char *outstring, int len, char *up, char *left, register int *argp)
 {
   register int c;
   register char *p = string;
